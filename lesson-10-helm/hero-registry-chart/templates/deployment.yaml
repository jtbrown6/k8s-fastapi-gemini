apiVersion: {{ include "hero-registry-chart.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "hero-registry-chart.fullname" . }}
  labels:
    {{- include "hero-registry-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "hero-registry-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "hero-registry-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hero-registry-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }} # Use targetPort from values
              protocol: TCP
          # livenessProbe: # Example placeholder
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe: # Example placeholder
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            {{- if .Values.configMapName }}
            - configMapRef:
                name: {{ .Values.configMapName }}
            {{- end }}
            {{- if .Values.secretName }}
            - secretRef:
                name: {{ .Values.secretName }}
            {{- end }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
          {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
          {{- else }}
          # If not using existingClaim, this part would create a PVC based on other values
          # persistentVolumeClaim:
          #   claimName: {{ include "hero-registry-chart.fullname" . }} # Or some other logic
          #   # This assumes the PVC is created by the chart itself, which we aren't doing here
          #   # as we use an existing one. If creating here, you'd need a PVC template too.
          {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
